import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Semaphore;

public class BuffetSemaphore implements Buffet {
	private int maxSlices;
	private List<SliceType> food;
	private boolean bufOpen;
	private int vegWait;
	private final Semaphore buf;
	private final Semaphore vegCounter;
	  
	public BuffetSemaphore(final int maxSlice) {
	    bufOpen = true;
	    vegWait = 0;
	    maxSlices = maxSlice;
	    food = new ArrayList<SliceType>();
	    buf = new Semaphore(1, true);
	    vegCounter = new Semaphore(1, true);
	}
	
	@Override
	public List<SliceType> TakeAny(int desired) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SliceType> TakeVeg(int desired) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean AddPizza(int count, SliceType stype) { int added = 0;

	    while ( added < count ) {
	        //wait on sema
	        buf.acquire();
	        if ( !bufOpen ) {
	            return false;
	        }
	
	        //Add pizza to vector
	
	        //Checks to see if there is room for the pizza
	        while ( food.size() < maxSlices ) {
	
	            //Checks if the buffet is open 
	            if ( !bufOpen ) {
	                //buffet closed return false
	                return false;
	            } else { 
	                //Adds the slice to the buff
	                food.add(stype);
	            }
	        }
	
	        //Signal sema
	        buf.release();
	    }
	
	    return true;
	}

	@Override
	public void close() {//No more slices can be added
	    maxSlices = 0;
	    bufOpen = false;
	    
	    //Waits on buff
	    try {
			buf.acquire();
		} catch (InterruptedException e) {
			System.err.println("Close interrupted");
		}
	    
	    //Clears food, holding the pizza
	    food.clear();

	    //posts buf
	    buf.release();


	    //While someone is using the semaphore busy wait
	    //Any remaining threads should enter CS and immediately get kicked out
	    //due to the maxSlice being 0 and the vector being empty.
	    while(buf.hasQueuedThreads());
	}

}
